// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum Role {
  buyer
  seller
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  role           Role
  username       String   @unique
  first_name     String
  last_name      String
  phone_number   String
  address        String
  gender         Gender
  dob            DateTime
  avatar         String
  referral_code  String
  reference_code String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  VoucherReferral VoucherReferral[]
  Event           Event[]
  Point           Point[]
  Order           Order[]
  Review          Review[]
  Promo           Promo[]

  @@index([username, email])
  @@map("users")
}

model VoucherReferral {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String
  voucher String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vouchers")
}

model Point {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [user_id], references: [id])
  user_id String
  point   Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("points")
}

enum LocationName {
  JABODETABEK
  JAWA
  SUMATRA
  KALIMANTAN
  SULAWESI
  BALI_NUSA_TENGGARA
  PAPUA_MALUKU
}

enum CategoryName {
  MUSIC
  SPORTS
  EXHIBITION
  CONFERENCE
  THEATRE
}

model Category {
  id            String       @id @default(cuid())
  category_name CategoryName

  Event Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model EventLocation {
  id       String       @id @default(cuid())
  location LocationName

  Event Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

model Event {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [user_id], references: [id])
  user_id     String
  banner      String
  title       String
  description String        @db.LongText
  start_time  DateTime
  end_time    DateTime
  venue       String
  location_id String
  location    EventLocation @relation(fields: [location_id], references: [id])
  category_id String
  category    Category      @relation(fields: [category_id], references: [id])
  promotor    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Ticket      Ticket[]
  Promo       Promo[]

  @@index([title])
  @@map("events")
}

enum TicketType {
  REGULAR
  DELUXE
  VIP
}

model Ticket {
  id           String     @id @default(cuid())
  event_id     String
  event        Event      @relation(fields: [event_id], references: [id])
  ticket_type  TicketType
  price        Decimal
  availability Int

  OrderDetail OrderDetail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tickets")
}

enum StatusOrder {
  CONFIRMED
  CANCELLED
  PENDING
}

model Order {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [user_id], references: [id])
  user_id     String
  date        DateTime
  status      StatusOrder
  OrderDetail OrderDetail[]
  Review      Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

enum PaymentMethod {
  VIRTUAL_ACCOUNT
  CREDIT_DEBIT_CARD
  E_WALLET
}

model OrderDetail {
  id             String        @id @default(cuid())
  order_id       String
  order          Order         @relation(fields: [order_id], references: [id])
  ticket_id      String
  ticket         Ticket        @relation(fields: [ticket_id], references: [id])
  payment_date   DateTime
  payment_method PaymentMethod
  total_ticket   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_details")
}

model Review {
  id          String @id @default(cuid())
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String
  order_id    String
  order       Order  @relation(fields: [order_id], references: [id])
  description String @db.LongText
  rating      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Promo {
  id       String @id @default(cuid())
  user     User   @relation(fields: [user_id], references: [id])
  user_id  String
  event_id String
  event    Event  @relation(fields: [event_id], references: [id])
  promo    String
  start_time  DateTime
  end_time    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("promos")
}
