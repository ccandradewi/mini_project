// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum Role {
  buyer
  seller
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  role           Role
  username       String    @unique
  first_name     String
  last_name      String
  phone_number   String    @db.VarChar(15)
  address        String?
  gender         Gender?
  dob            DateTime?
  avatar         String?
  referral_code  String?
  reference_code String?
  isVerified     Boolean?  @default(false)
  bankAccount    String?
  bank           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  VoucherPoint VoucherPoint[]
  Event        Event[]
  Order        Order[]
  Review       Review[]

  @@index([username, email])
  @@map("users")
}

model VoucherPoint {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [user_id], references: [id])
  user_id      String
  point        Float    @db.Double
  expired_date DateTime
  voucher      Float    @db.Double
  isValid      Boolean  @default(true)

  createdAt DateTime @default(now())

  @@map("vouchers")
}

enum LocationName {
  JABODETABEK
  JAWA
  SUMATRA
  KALIMANTAN
  SULAWESI
  BALI_NUSA_TENGGARA
  PAPUA_MALUKU
}

enum CategoryName {
  MUSIC
  SPORTS
  EXHIBITION
  CONFERENCE
  THEATRE
}

enum Promo {
  TEN_PERCENT         @map("10%")
  TWENTY_FIVE_PERCENT @map("25%")
  FIFTY_PERCENT       @map("50%")
}

enum Type {
  FREE
  PAID
}

model Event {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [user_id], references: [id])
  user_id        String
  banner         Bytes        @db.LongBlob
  title          String
  description    String       @db.LongText
  start_time     DateTime
  end_time       DateTime
  venue          String
  city           LocationName
  location       String
  category       CategoryName
  promotor       String
  type           Type
  availability   Int
  ticket_price   Float?       @db.Double
  discount_price Float?       @db.Double
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  promo       Promo?
  start_promo DateTime?
  end_promo   DateTime?

  Order Order[]

  @@index([title])
  @@map("events")
}

enum StatusOrder {
  CONFIRMED
  CANCELLED
  PENDING
}

enum PaymentMethod {
  VIRTUAL_ACCOUNT
  GOPAY
  BANK_TRANSFER
  SHOPEEPAY
  CREDIT_DEBIT_CARD
}

model Order {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [buyer_id], references: [id])
  buyer_id       String
  event          Event         @relation(fields: [event_id], references: [id])
  event_id       String
  total_ticket   Int
  total_price    Float         @db.Double
  date           DateTime
  payment_date   DateTime
  payment_method PaymentMethod
  payment_proof  Bytes         @db.LongBlob
  status         StatusOrder
  Review         Review[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("orders")
}

model Review {
  id          String @id @default(cuid())
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String
  order_id    String
  order       Order  @relation(fields: [order_id], references: [id])
  description String @db.LongText
  rating      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
